[build-system]
build-backend = "setuptools.build_meta"
requires      = ["setuptools>=61.0", "wheel"]

[project]
authors = [{ name = "Andres Ingelmo", email = "aingelmo@gmail.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Streamlit",
    "Intended Audience :: Home Users",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Visualization",
]
description = "A Streamlit dashboard for visualising HCGateway data"
keywords = ["streamlit", "dashboard", "health", "visualization"]
name = "hcgateway-dashboard"
readme = "README.md"
requires-python = ">=3.13"
version = "0.1.0"

dependencies = [
    "streamlit>=1.47.1",
    "requests>=2.32.4",
    "pydantic>=2.11.7",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.12.7",
    "mypy>=1.17.1",
    "pre-commit>=4.2.0",
    "bandit>=1.8.6",
    "detect-secrets>=1.5.0",
    "httpx>=0.28.1",
    "pandas-stubs>=2.3.0.250703",
    "types-requests>=2.32.4.20250611",
]
test = ["pytest>=8.4.1", "pytest-mock>=3.14.1", "httpx>=0.28.1"]

[project.urls]
Documentation = "https://github.com/aingelmo/HCGateway-dashboard#readme"
Homepage      = "https://github.com/aingelmo/HCGateway-dashboard"
Issues        = "https://github.com/aingelmo/HCGateway-dashboard/issues"
Repository    = "https://github.com/aingelmo/HCGateway-dashboard.git"

[project.scripts]
hcgateway-dashboard = "hcgateway_dashboard.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.ruff]
line-length    = 120
src            = ["src", "tests"]
target-version = "py313"

[tool.ruff.lint]
select = [
    "F",   # Pyflakes
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "C90", # mccabe complexity
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]

ignore = [
    "D203",   # one-blank-line-before-class (conflicts with D211)
    "D213",   # multi-line-summary-second-line (conflicts with D212)
    "COM812", # trailing comma (conflicts with formatter)
    "ISC001", # single-line-implicit-string-concatenation (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"app.py" = ["T201"]
"tests/*" = [
    "S101",    # Allow assert statements
    "D",       # Ignore docstring rules
    "ANN",     # Ignore type annotations
    "ARG",     # Ignore unused arguments
    "PLR2004", # Magic value comparisons
    "SLF001",  # Private member access (needed for testing)
    "S105",    # Hardcoded passwords in tests
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party   = ["hcgateway_dashboard"]
lines-after-imports = 2

[tool.ruff.format]
indent-style = "space"
line-ending  = "auto"
quote-style  = "double"

[tool.mypy]
files                   = ["src", "tests"]
python_version          = "3.13"
show_error_codes        = true
strict                  = true
warn_unreachable        = true
ignore_missing_imports  = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module                 = [
    "streamlit.*",
    "pydantic.*",
    "dotenv.*",
    "pandas.*"
]

[tool.pytest.ini_options]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=hcgateway_dashboard",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
python_classes = ["Test*"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.coverage.run]
omit   = ["*/tests/*", "*/test_*.py"]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
]

[tool.bandit]
# Security scanner configuration
exclude_dirs = ["tests", ".venv", "__pycache__"]
skips        = ["B101"]                          # Skip assert_used test since we use asserts in tests
